import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import  StateFilter
import google.generativeai as genai
import os 
import cv2 
import requests
from dotenv import load_dotenv
import shutil
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from gemini import prompt, Model

load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (logging setup)
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º (Bot initialization with token)
bot_token = os.getenv('BOT_TOKEN')
bot = Bot(bot_token)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (Dispatcher initialization)
dp = Dispatcher()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞ –¥–ª—è Google Generative AI (API key configuration for Google Generative AI)
gemini_api_key = os.getenv('GEMINI_API_KEY')
genai.configure(api_key = gemini_api_key)

# –ú–æ–¥–µ–ª—å –∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ AI (Model and prompt for generative AI)
model = Model
chat = prompt

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (State definitions)
class WaitingForMessage(StatesGroup):
    CaptureMessages = State()
    NonCaptureMessages = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (Handler for the /start command)
@dp.message(Command("start"))
async def bot_start(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Keyboard creation)
    kb = [
        [
            types.KeyboardButton(text="start chatüíª"),
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (Welcome message)
    await message.answer("""
üíªHello I'm Chat bot with Gemini by IgorBlink
 """, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "start chatüíª" (Handler for the "start chatüíª" message)
@dp.message(F.text.lower() == "start chatüíª")
async def new_chat(message: types.Message, state: FSMContext):
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (Set state for capturing messages)
    await state.set_state(WaitingForMessage.CaptureMessages)
    await message.reply("chat was successfully created.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CaptureMessages (Handler for messages in CaptureMessages state)
@dp.message(WaitingForMessage.CaptureMessages)
async def bot_answer(message: types.Message, state: FSMContext, photos_dir="photos", audio_dir="audio", video_dir="content"):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Keyboard creation)
    kb = [
        [
            types.KeyboardButton(text="stop‚õî"),
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (Processing text messages)
    if message.text:
        if message.text == "stop‚õî":
            await message.answer("Chat been successfully stoped‚úÖ!")
            await state.set_state(WaitingForMessage.NonCaptureMessages)
            await bot_start(message=message, state=state)   
        else:
            waitforasnwer = await message.answer("Generating answer‚åõ")
            question = message.text
            response = chat.send_message(question,
                                         safety_settings={
                                             'HATE': 'BLOCK_NONE',
                                             'HARASSMENT': 'BLOCK_NONE',
                                             'SEXUAL': 'BLOCK_NONE',
                                             'DANGEROUS': 'BLOCK_NONE'
                                         })
            await bot.delete_message(chat_id=message.chat.id, message_id=waitforasnwer.message_id)
            await message.answer(response.text, reply_markup=keyboard)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (Processing photo messages)
    elif message.photo:
        waitforasnwer = await message.answer("Generating answer—Ç‚åõ")
        file_name = f"{photos_dir}/{message.photo[-1].file_id}.jpg"
        os.makedirs(photos_dir, exist_ok=True)
        await bot.download(message.photo[-1], destination=file_name)
        print(f"Photo downloaded to: {file_name}")
        sample_file = genai.upload_file(path=file_name,
                                        display_name="UserPhoto")
        print(f"Uploaded file '{sample_file.display_name}' as: {sample_file.uri}")
        file = genai.get_file(name=sample_file.name)
        print(f"Retrieved file '{file.display_name}' as: {sample_file.uri}")
        response = model.generate_content(["Describe image", sample_file])
        await bot.delete_message(chat_id=message.chat.id, message_id=waitforasnwer.message_id)
        await message.answer(response.text, reply_markup=keyboard)
        os.remove(file_name)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ (Main function to start polling)
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
